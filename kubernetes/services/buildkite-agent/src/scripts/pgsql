#!/bin/bash

set -eou pipefail

psql_cmd=$(which psql)
if [[ ! -x $psql_cmd ]]; then
    echo "Command psql not installed" 1>&2
    exit 1
fi

# Increase psql log to warning
export PGOPTIONS='--client-min-messages=warning'

#
# Initiate database
#
function init {
    createdb "$PGDATABASE" 2> /dev/null || true
    psql -qc "CREATE EXTENSION IF NOT EXISTS pgcrypto;"
    psql -qc "REVOKE connect ON DATABASE \"$PGDATABASE\" FROM PUBLIC;"
    psql -qc "
      CREATE TABLE IF NOT EXISTS tokens (
        email               VARCHAR(50) PRIMARY KEY,
        bitbucket_user      VARCHAR(50) UNIQUE,
        bitbucket_token     VARCHAR,
        artifactory_user    VARCHAR(50) UNIQUE,
        artifactory_token   VARCHAR
      );
    "
    psql -qc "
      CREATE OR REPLACE FUNCTION hash_update_tg()
      RETURNS trigger AS \$\$
        BEGIN
          IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN
            NEW.bitbucket_token = PGP_SYM_ENCRYPT(NEW.bitbucket_token, '$AES256_KEY');
            NEW.artifactory_token = PGP_SYM_ENCRYPT(NEW.artifactory_token, '$AES256_KEY');
            RETURN NEW;
          END IF;
        END;
      \$\$ LANGUAGE plpgsql;
    "
    psql -tc "
      CREATE TRIGGER secret_tokens_insert_update
      BEFORE INSERT OR UPDATE ON tokens
      FOR EACH ROW EXECUTE PROCEDURE hash_update_tg();
    " 2> /dev/null || true
}

#
# Load user tokens to env
#
function env {
  EMAIL=$1

  select=$(psql -F "," -Atc "
    SELECT email,
      bitbucket_user,
      PGP_SYM_DECRYPT(bitbucket_token::bytea, '$AES256_KEY'),
      artifactory_user,
      PGP_SYM_DECRYPT(artifactory_token::bytea, '$AES256_KEY')
    FROM tokens WHERE email = '$EMAIL';
  ")
}

#
# Manual
#
function help {
    echo "Usage: $(basename $0) command"
    echo "Commands: init"
}

# input function
option=$1

shift 1

if [[ -z $option ]]; then
    help
    exit 1
fi

case $option in
    init)
        init
        ;;
    env)
        env $@
        ;;
    *)
        help
        ;;
esac
